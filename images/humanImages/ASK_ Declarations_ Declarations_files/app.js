(function() {
    var days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];
    var months = ['January','February','March','April','May','June','July','August','September','October','November','December'];
	var days_short = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];
	var months_short = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];

    Date.prototype.getMonthName = function() {
        return months[ this.getMonth() ];
    };
    Date.prototype.getDayName = function() {
        return days[ this.getDay() ];
    };
	Date.prototype.getMonthNameShort = function() {
        return months_short[ this.getMonth() ];
    };
    Date.prototype.getDayNameShort = function() {
        return days_short[ this.getDay() ];
    };
	Date.prototype.toMySQLString = function() {
		this.setMinutes(this.getMinutes()-this.getTimezoneOffset()) ;
	    return this.toISOString().slice(0, 19).replace('T', ' ');
	};
	// work around browser inconsistencies with toLocaleTimeString()
	Date.prototype.toUSTimeString = function() {
		var h = this.getHours();
		var m = this.getMinutes();
		var ampm = 'AM';
		if( h >= 12 ) {
			ampm = 'PM' ;
			if( h > 12 ) {
				h -= 12;
			}
		} else if( h == 0 ) {
			h = 12;
		}
		
		// quickie zero padding
		h = ('0' + h).slice(-2);
		m = ('0' + m).slice(-2);
		
		return h + ':' + m + ' ' + ampm;
		
	};
})();


/*
 * _APP will be a global object we can use throughout this application to store
 * properties that we may need. This avoids creating global variables, which can
 * be dangerous. See "Javascript: The Good Parts" section on Global Abatement for
 * additional detail.
 */

var _APP = {};

Array.max = function( array ) {
	return Math.max.apply( Math, array );
};
Array.min = function( array ) {
	return Math.min.apply( Math, array );
};


_APP.messages = {
	confirm: 'This action cannot be undone. Are you sure you want to do this?',
	block: 'Please wait...'
} ;

_APP.parseMySQLDate = function(datetime) {		
	// return a standard MySQL datetime string as a javascript Date object
	var regex=/^([0-9]{2,4})-([0-1][0-9])-([0-3][0-9])(?: ([0-2][0-9]):([0-5][0-9]):([0-5][0-9]))?$/;
	var parts=datetime.replace(regex,"$1 $2 $3 $4 $5 $6").split(' ');
	return new Date(parts[0], parts[1]-1, parts[2], parts[3], parts[4], parts[5] );
};

// NOTE: This has been pulled from StackOverflow (http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript).
// I'm not entirely sure whether UUIDs generated by it are safe for use in database storage, but they should at least be reasonable
// if we need something to generate unique IDs for client-side DOM manipulation, for example.
_APP.generate_uuid = function() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
                return v.toString(16);
        });     
} ;

_APP.blockInterface = function blockInterface(message) {
	if( 'undefined' == typeof message || message == null ) {
		message = _APP.messages.block ;
	}
	$.blockUI({
		message: message,
		css: {
			'border': 'none',
			'padding': '15px',
			'background-color': 'rgb(0,0,0,.5)',
			'-webkit-border-radius': '10px',
			'-moz-border-radius': '10px',
			'color': '#ddd',
			'font-size': '16px'
		}
	}) ;
};

_APP.removeRelatedItem = function removeRelatedItem() {
		var parentDiv = $(this).parent().parent();
		parentDiv.find('.related-item-label').addClass('deleted');
		parentDiv.find('input[type="hidden"]').val('');
		parentDiv.find('input[type="text"]').val('');

		// make sure these are no longer editable...
		parentDiv.children('.related-item-label').each(function() {
			if ($(this).hasClass('edit')) {
				$(this).removeClass('edit');
				$(this).editable('disable');
			}
			if ($(this).hasClass('editarea')) {
				$(this).removeClass('editarea');
				$(this).editable('disable');
			}
		});
		
		if( parentDiv.hasClass('editable-item')) {
			parentDiv.hide();
		}
	};

_APP.addRelatedItem = function addRelatedItem(container, label, hidden_field, hidden_value, editable) {
	var relatedItem;
	if( typeof editable == 'undefined' ) {
		editable = false;
	}
	if( editable ) {
		relatedItem = $('<div class="related-item editable-item"></div>');
	} else {
		relatedItem = $('<div class="related-item"></div>');
	}
	
	
	
	if( editable ) {
		relatedItem.append('<span class="related-item-label"><input type="text" name="' + hidden_field + '[]" value="' + hidden_value + '" /></span>');
		relatedItem.append('<span class="related-item-link">(<a class="removal-link">Remove</a>)</span>');
	} else {
		relatedItem.append('<span class="related-item-label">' + label + '</span>');
		relatedItem.append('<span class="related-item-link">(<a class="removal-link">Remove</a>)</span>');
		relatedItem.append('<input type="hidden" name="' + hidden_field + '[]" value="' + hidden_value + '" />');
	}
		
	relatedItem.appendTo(container);

	$('a.removal-link').on('click', _APP.removeRelatedItem);
};


/*
 * This assumes that searchField is wrapped in a container such as a span that defines
 *	the width of the field such that there is little to no padding to the right. It was
 * designed to work with the autocomplete field, which has events we can piggyback on to
 * show and hide the spinner. If this is used in other contexts, the events can be left empty.
 */
_APP.addProgressSpinner = function addProgressSpinner(searchField, showEvent, hideEvent, style) {
	if (style == null) {
		style = '';
	}
	searchField.parent().wrap(function() {
		var parentWidth = $(this).width() + 20;
		return '<div class="progress-spinner" style="width:' + parentWidth + 'px;' + style + '"></div>';
	});

	if (showEvent != null && showEvent != '') {
		searchField.on(showEvent, function(event, ui) {
			$(this).closest('.progress-spinner').addClass('autocomplete-progress-spinner');
		});
	}

	if (hideEvent != null && hideEvent != '') {
		searchField.on(hideEvent, function(event, ui) {
			$(this).closest('.progress-spinner').removeClass('autocomplete-progress-spinner');
		});
	}

};

_APP.populateSelectViaAJAX = function populateSelectViaAJAX(url, data, selectMenu ) {
	$.ajax({
		type: 'GET',
		url: url,
		dataType: 'json',
		success: function(j) {
			var option ;
			var i = 0;
			selectMenu.empty() ;
			for (i = 0; i < j.length; i++) {
				option = $('<option value="' + j[i].value + '">' + j[i].display + '</option>');
				if( typeof j[i].disabled != 'undefined' && j[i].disabled ) {
					option.prop('disabled',true) ;
				}
				
				if( typeof j[i].data != 'undefined') {
					option.data('detail',j[i].data) ;
				}
				selectMenu.append(option) ;
			}
		},
		data: data,
		async: false
	});
};

_APP.isNumber = function isNumber(n) {
	return !isNaN(parseFloat(n)) && isFinite(n);
};

_APP.friendly_term = function friendly_term(term_id,long_version) {
	var output = '', term_code, year ;
	if( typeof long_version == 'undefined' || long_version == null ) {
		long_version = false ;
	}
	if( term_id != null ) {
		term_code = term_id.substr(4, 2);
		year = term_id.substr(0, 4);

		switch (term_code) {
			case '00':
				output = long_version ? year + '-' + (parseInt(year) + 1) + ' - Summer' : year + '-Summer ';
				break;
			case '10':
				output = long_version ? year + '-' + (parseInt(year) + 1) + ' - Fall' : year + '-Fall ';
				break;
			case '20':
				output = long_version ? year + '-' + (parseInt(year) + 1) + ' - Spring' : (parseInt(year) + 1) + '-Spring';
				break;
		}
	}
		
	return output;
};

/*
 * Convert a set of date/time fields as generated by DOC core's helper to a
 * single datetime string. If the container didn't match a single element,
 * returns null.
 */
_APP.parse_datetime_fields = function parse_datetime_fields(container, prefix) {
	var output, date, hour, minute, ampm;
	if( container.length == 1 ) {
		date = container.find('input[name="'+prefix+'_date"]').val().replace(/(\d+)\/(\d+)\/(\d+)/,'$3-$1-$2') ;
		hour = container.find('select[name="'+prefix+'_hour"]').val() ;
		minute = container.find('select[name="'+prefix+'_minute"]').val() ;
		ampm = container.find('select[name="'+prefix+'_meridian"]').val() ;

		if( ampm == 'PM' ) {
			hour = parseInt(hour) + 12 ;
		}
		
		output = date + ' ' + hour + ':' + minute + ':00' ;
	} else {
		output = null ;
	}
	
	return output;
};

_APP.confirm_action = function confirm_action() {
	return confirm(_APP.messages.confirm);
};

// initialize some jQuery stuff...

$(document).ready(function() {

	_APP.jwysiwyg_config_default = {
			autoGrow: true,
			resizeOptions: false,
			rmUnwantedBr: true,
			rmUnusedControls: true,
			iFrameClass: 'jwysiwyg-iframe',
			css: _APP.approot + 'css/jwysiwyg-iframe.css',
			initialContent: '',
			controls: {
				bold: {visible: true},
				italic: {visible: true},
				strikeThrough: {visible: true},
				underline: {visible: true},
				indent: {visible: true},
				outdent: {visible: true},
				undo: {visible: true},
				redo: {visible: true},
				insertOrderedList: {visible: true},
				insertUnorderedList: {visible: true},
				createLink: {visible: true},
				insertImage: {visible: false},
				insertTable: {visible: false},
				html: {visible: false},
				removeFormat: {visible: true}
			}
	};

	_APP.jwysiwyg_config_no_links = {
			autoGrow: true,
			resizeOptions: false,
			rmUnwantedBr: true,
			rmUnusedControls: true,
			iFrameClass: 'jwysiwyg-iframe',
			css: _APP.approot + 'css/jwysiwyg-iframe.css',
			initialContent: '',
			controls: {
				bold: {visible: true},
				italic: {visible: true},
				strikeThrough: {visible: true},
				underline: {visible: true},
				indent: {visible: true},
				outdent: {visible: true},
				undo: {visible: true},
				redo: {visible: true},
				insertOrderedList: {visible: true},
				insertUnorderedList: {visible: true},
				createLink: {visible: false},
				insertImage: {visible: false},
				insertTable: {visible: false},
				html: {visible: false},
				removeFormat: {visible: true}
			}
	};


	$('.datepicker').datepicker({
		changeMonth: true,
		changeYear: true
	});

	// a generic confirm handler
	$(document).on('click', '.confirmDialog', _APP.confirm_action);

	// highlight the full item when hovering over the "remove" link in related item lists

	$(document).on('mouseenter mouseleave', '.related-item-link',
		function() {
			$(this).closest('.related-item').toggleClass('related-item-highlight');
		}
	);

	/*
	 * Client-side table sorting support. We'll assume that the first column
	 * is the default sort and that we always want zebra striping.
	 */

	/*
    * Extra parser: checkbox
    * Credit: Christian Bach
    * Modified By Bill Beckelman
    */
    $.tablesorter.addParser({
        id: 'input',
        is: function(s) {
            return s.toLowerCase().match(/<input[^>]*checkbox[^>]*/i);
        },
        format: function(s) {
            var integer = 0;
            if (s.toLowerCase().match(/<input[^>]*checked*/i)) {
                integer = 1;
            }
            return integer;
        },
        type: 'numeric'
    });


	$('form#filter').searchfilter({'enable_datetime': false});


	/* headshot handlers */

	$('.headshot-icon').prepend('<span class="ui-icon ui-icon-left ui-icon-clickable ui-icon-person show-headshot"></span>');
	
	$(document).on('click','.show-headshot',function(){
		var row_data = $(this).closest('tr').data('rowData');
		var student_id = row_data.student_id;
		var prev_student_id = null;
		var headshot_container;
		var headshot_left = $(this).position().left + 12;
		var headshot_top = $(this).position().top + 12;
		
		// double-check the current position and adjust if we're near the bottom of the page
		if( headshot_top > $(document).height() - 300 ) {
			headshot_top = $(this).position().top - 200 ;
		}
		
		
		if( $('#headshot-container').length == 1 ) {
			prev_student_id = $('#headshot-container').data('studentId') ;
			$('#headshot-container').remove() ;
		}
		
		if( prev_student_id != student_id ) {
			headshot_container = $('<div id="headshot-container" data-student-id="'+student_id+'" class="redact"><img src="'+_APP.approot + 'banner/photo/' + student_id+'" /></div>') ;
			headshot_container.css({ "left": headshot_left + "px", "top": headshot_top + "px" }) ;
			$('body').append(headshot_container) ;
		}
		
	});



	/*
	 * A standard method for allowing cancel buttons to send us somewhere.
	 * Set the _APP.cancelLocation on the specific page where you need it.
	 */
	$('input[type="button"][name="cancel"]').on('click', function() {
		window.location = _APP.cancelLocation;
	});

	/*
	 * A handler for removing items from a related items list. This is based on
	 * the following structure:
	 *
	 * <div id="__some id__">
	 *     <div class='related-item'>
	 *	       <span class='related-item-label'>__some label__</span>
	 *         <span class='related-item-link'>(<a class='removal-link'>remove</a>)</span>
	 *         <input type='hidden' name='__some_name__[]' value='__some id__' />
	 *     </div>
	 * </div>
	 *
	 * The code here will add the strikeout class to the label and zero out the hidden field's value.
	 *
	 */

	 $(document).on('click','a.removal-link',_APP.removeRelatedItem) ;

	/*
	 * Set up any wysiwyg editors we need on the page.
	 */

	$('textarea.wysiwyg').wysiwyg(_APP.jwysiwyg_config_default);
	$('textarea.wysiwyg-nolinks').wysiwyg(_APP.jwysiwyg_config_no_links);

	 /*
	  * Our basic help widget...
	  * todo: standardize on .help-trigger class over the helpTrigger-* id
	  */

	$('span[id|="helpTrigger"], .help-trigger').on('click', function() {
		var help_content = $('#help'+$(this).prop('id').replace(/helpTrigger/, ''));
		help_content.toggle();
		var help_left = 40;
		var help_top = $(this).position().top + $(this).height() + 20;
		var help_width = Math.max($(this).position().left + $(this).width() - 80, 640);

		help_content.css({ 'left': help_left + 'px', 'top': help_top + 'px', 'width': help_width + 'px' });


		if ($(this).hasClass('on')) {
			$(this).removeClass('on');
		} else {
			$(this).addClass('on');
		}
	});

	// TODO: standardize on .help selector
	// TODO: Re-enable draggable behavior.
	// It appears that jQueryUI 1.10.3 has a bug that breaks some draggable behaviors 
	// when the page is scrolled (see http://bugs.jqueryui.com/ticket/9315). 
	// This is not yet fixed in 1.10.4 (the latest version as of this writing). 
	// I'm disabling the drag behavior until a fix is released.

//	$('#help, .help').draggable({stack: '.help'});

	/*
	 * Intro content handlers
	 */
	if( $('#intro').length == 1 ) {
		$.fancybox( $('#intro') ) ;
	}
	
	$('#intro .do-not-show').on('click',function(){
		var app_abbrev = $('#intro').data('appid');
		var path = $('#intro').data('path');
		$.ajax({
			type: 'POST',
			url: _APP.approot + 'rest/intro/hide',
			cache: false,
			data: {app:app_abbrev, uri:path},
			dataType: 'json'
		});
		$.fancybox.close();
	});


	 /*
	  * More apps menu...
	  */
	 $('.submenu-link').on('click', function() {
		var my_menu = $(this).parent().find('.submenu-options');
		$('.submenu-options').not(my_menu).hide() ;
		my_menu.toggle() ;
		
		// $(this).parent().find('.submenu-options').toggle();
		var menuLeft = $(this).position().left;
		var menuTop = $(this).position().top + $(this).outerHeight(true) - 1;

		my_menu.css({'left': menuLeft + 'px', 'top': menuTop + 'px'});
		return false ;
	 });
 
 

	/*
	 * Handler for our standard n:n interface where we have a list of items in a
	 * select menu that are added via an "Add" button.
	 */
	$("input[type='button'][id|='related'][value='Add']").on('click', function() {
		var fieldname = ($(this).prop('id')).replace(/^related-/, '').replace(/-add$/, '');
		var relatedDiv = $('#related-' + fieldname);
		var newValue = '', newDisplay = '';
		var editable = $(this).hasClass('editable-item');

		if ($(this).parent('td').find('select[name="select-' + fieldname + '"]').length == 1) {
			newValue = $(this).parent('td').find('select[name="select-' + fieldname + '"]').val();
			newDisplay = $(this).parent('td').find('select[name="select-' + fieldname + '"]').find('option:selected').html();
		} else if ($(this).parent('td').find('select').length == 1) {
			newValue = $(this).parent('td').find('select').val();
			newDisplay = $(this).parent('td').find('select').find('option:selected').html();
		} else if ($(this).parent().find('input[type="text"]').length == 1) {
			newValue = $(this).parent().find('input[type="text"]').val();
			newDisplay = newValue;
			$(this).parent().find('input[type="text"]').val('');
		}


		_APP.addRelatedItem(relatedDiv, newDisplay, fieldname, newValue, editable);
	});


	/*
	 *	Generic handler to block further user action when something with class "block"
	 *	is clicked on.
	 */

	$(document).on('click','.block',function(){_APP.blockInterface();});




});
